type Course @model
@auth(rules: [
  {allow: private, operations: [read]},
  {allow: groups, groups: ["Admin"]},
  ])
  {
  id: ID!
  name: String!
  scheduleDates: [Int]!
  scheduleStartTime: AWSTime!
  scheduleEndTime: AWSTime!
  virtualClassLink: String
  isActive: Boolean @default(value: "true")
  externalId: String!
  scheduleYear: Int!
}

enum MediaType {
  LINK,
  FILE,
}

type MediaFolder @model
@auth(rules: [
  {allow: owner},
  {allow: groups, groups: ["Admin"]},
  {allow: groups, groupsField: "groups", operations: [read] }
  ])
  {
  id: ID!
  name: String!
  groups: [String!]!
}

type Media @model
@auth(rules: [
  {allow: owner},
  {allow: groups, groups: ["Admin"]},
  {allow: groups, groupsField: "groups", operations: [read] }
  ])
  {
  id: ID!
  title: String!
  type: MediaType! 
  description: String
  link: String!
  content: String
  groups: [String!]!
  uploadedBy: String!
  mimeType: String
  folderId: String
}

enum DisabledAccountReasons {
  DISABLED_BY_ADMIN,
  PAYMENT_NOT_COMPLETED
}

type User @model
@auth(rules: [
  {allow: groups, groups: ["Admin"]},
  {allow: groups, groups: ["Students","Teachers"], operations: [read] },
  ])
  {
  id: ID!
  name: String!
  email: String!
  phone: String!
  cognitoId: ID!
  groups: [String!]!
  isDisabledUser: Boolean @default(value: "false")
  disabledReason: DisabledAccountReasons
} 

type Options {
    id: String!
    label: String!
    isCorrectOption: Boolean
  }

type Timer {
    type: String!
    timeInSeconds: Int!
}

type Exam @model
@auth(rules: [
  {allow: owner},
  {allow: groups, groups: ["Admin"]},
  {allow: groups, groups: ["Students","Teachers"], operations: [read] },
  ])
{
  id: ID!
  groups: [String!]!
  title: String!
  questionPools: AWSJSON!
  timer: Timer!
  deadline: AWSDateTime!
  startDate: AWSDateTime!
}

type ExamAttempt @model
@auth(rules: [
  {allow: owner},
  {allow: groups, groups: ["Admin"]},
  {allow: groups, groups: ["Students","Teachers"], operations: [read] },
  ])
{
  id: ID!
  examId: ID!
  examName: String!
  userId: ID!
  score: Int
  isCompleted: Boolean @default(value: "false")
  correctAnswers: Int
  correctedBy: String
  externalId: ID!
  answers: AWSJSON
}